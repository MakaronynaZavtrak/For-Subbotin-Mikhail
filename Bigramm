#include <iostream>
#include <string>
#include <fstream>
#include <filesystem>
#include "BigrammDictionary.h"
#include "stringHandlers.h"

using std::cout, std::cin, std::string, std::endl, std::ifstream, std::pair, std::filesystem::exists, std::filesystem::is_empty;

int main()
{
	setlocale(LC_ALL, "RUS");

	BigrammDictionary b1;
	cout << "Выберите один из двух режимов: \"learning\" - обучение, \"generation\" - генерация текста" << endl;
	string mode = "";
	getline(cin, mode);

	while (mode != "learning" && mode != "generation")
	{
		cout << "Ошибка! Данного режима не существует...Может, вы ошиблись в вводе? Попробуйте ещё раз!" << endl;
		getline(cin, mode);
	}

	if (mode == "learning")
	{
		cout << "Каким образом вы хотите обучить словарь?" << endl;
		cout << "\"file\" - с помощью файла, \"custom text\" - с помощью введенного текста?" << endl;
		getline(cin, mode);
		while (mode != "file" && mode != "custom text")
		{
			cout << "Ошибка! Данного метода обучения не существует...Наверное, вы ошиблись в вводе. Попробуйте ещё раз!" << endl;
			getline(cin, mode);
		}

		string path;
		string firstWord;
		string secondWord;

		if (mode == "file") 
		{
			cout << "Введите путь текстового файла, который нужно проанализировать" << endl;
			getline(cin, path);
			ifstream in(path);

			//проверка на корректность введенного пути до файла
			while (!in.is_open())
			{
				cout << "Ошибка! Неверный путь к файлу!" << endl;
				getline(cin, path);
				in.open(path);
			}

			if (!in.eof())
				in >> firstWord;

			//чтение из файла
			while (!in.eof())
			{
				in >> secondWord;
				if (!isSeparated(firstWord))
					b1.add(handler(firstWord), handler(secondWord));
				firstWord = secondWord;
			}
		}
		//иначе mode == "custom text"
		else 
		{
			cout << "Введите текст, на котором хотите обучить словарь" << endl;
			string text;
			getline(cin, text);
			pair<string*, int> words = splitText(text);
			firstWord = words.first[0];

			for (int i = 1; i < words.second; i++)
			{
				secondWord = words.first[i];
				if (!isSeparated(firstWord))
					b1.add(handler(firstWord), handler(secondWord));
				firstWord = secondWord;
			}
		}

		//сохранение данных в словарик
		cout << "Введите путь файла, в котором вы хотите сохранить полученные данные" << endl;
		getline(cin, path);

		//проверка на наличие файла
		while (!exists(path))
		{
			cout << "Ошибка! Файл не найден!" << endl;
			getline(cin, path);
		}

		//если файл для записи данных является пустым
		if (is_empty(path))
			b1.upload(path);
		//если в файле уже присутствуют какие-то данные
		else
		{
			cout << "Внимание! Файл, в который вы хотите записать данные, уже что-то содержит! Как вы хотите поступить с файлом?" << endl;
			cout << "\"rewrite\" - удалить имеющиеся данные в файле и сохранить в нём только что полученные," << endl;
			cout << "\"append\" - совместить статистику биграмм с имеющимися в файле и добавить новые биграммы в конец файла" << endl;
			string option;
			getline(cin, option);
			while (option != "rewrite" && option != "append") 
			{
				cout << "Ошибка! Данной команды не существует! Попробуйте ещё раз!" << endl;
				getline(cin, option);
			}
			if (option == "rewrite")
				b1.upload(path);
			else
			{
				b1.download(path);
				b1.upload(path);
			}
		}

		cout << "Полученные данные:" << endl;
		b1.print();


 	}
	//иначе mode == "generation"
	else
	{
		cout << "Введите предложение, с которого нужно начать генерировать текст" << endl;
		string sentence;
		getline(cin, sentence);
		cout << "Введите число, на которое нужно продолжить текст" << endl;
		int num;
		cin >> num;

		//здесь возникает необходимость прописывать полный путь по той причине,
		//что программа иначе не будет работать в командной строке
		b1.download("C:\\Users\\user\\source\\repos\\Learning\\data.txt");
		cout << typeid(num).name() << ':' << num << endl;
		pair<string, int> lastWordAndSpaceIdx = getLastWordAndSpaceIdx(sentence);

		//если пользователь ввел одно слово
		if (lastWordAndSpaceIdx.first == sentence)
			cout << b1.generateText(num, sentence) << endl;
		//иначе пользователь ввел более одного слова
		else 
		{
			cout << "Полученный текст:" << endl;
			cout << sentence.substr(0, lastWordAndSpaceIdx.second + 1) << b1.generateText(num, lastWordAndSpaceIdx.first);
		}
	}
	b1.~BigrammDictionary();

	return 0;
}
